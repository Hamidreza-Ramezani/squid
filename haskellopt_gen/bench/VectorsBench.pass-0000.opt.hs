-- Generated Haskell code from Graph optimizer
-- Core obtained from: The Glorious Glasgow Haskell Compilation System, version 8.6.3
-- Optimized after GHC phase:
--   desugar
-- Total nodes: 4372; Boxes: 524; Branches: 282
-- Apps: 1438; Lams: 60; Unreduced Redexes: 0

{-# LANGUAGE UnboxedTuples #-}
{-# LANGUAGE MagicHash #-}
{-# LANGUAGE NoMonomorphismRestriction  #-}

module Main (prod_12,test_12,test_8,test_3,prod_5,test_4,test_11,prod_1,test_7,prod_6,main,test_5,prod_2,prod_7,prod_3,test_1,prod_11,test_6,test_10,test_2,test_9,prod_8,prod_9,prod_4,prod_10) where

import Control.Exception.Base
import Criterion.Main
import Criterion.Measurement.Types
import Data.Foldable
import GHC.Base
import GHC.CString
import GHC.Enum
import GHC.Num
import GHC.TopHandler

main = (GHC.TopHandler.runMainIO (Criterion.Main.defaultMain (((:) (((GHC.Base.$) (Criterion.Measurement.Types.bench (GHC.CString.unpackCString# "1"#))) ((Criterion.Measurement.Types.whnf test_1) 1000))) (((:) (((GHC.Base.$) (Criterion.Measurement.Types.bench (GHC.CString.unpackCString# "2"#))) ((Criterion.Measurement.Types.whnf test_2) 1000))) (((:) (((GHC.Base.$) (Criterion.Measurement.Types.bench (GHC.CString.unpackCString# "3"#))) ((Criterion.Measurement.Types.whnf test_3) 1000))) (((:) (((GHC.Base.$) (Criterion.Measurement.Types.bench (GHC.CString.unpackCString# "4"#))) ((Criterion.Measurement.Types.whnf test_4) 1000))) (((:) (((GHC.Base.$) (Criterion.Measurement.Types.bench (GHC.CString.unpackCString# "5"#))) ((Criterion.Measurement.Types.whnf test_5) 1000))) (((:) (((GHC.Base.$) (Criterion.Measurement.Types.bench (GHC.CString.unpackCString# "6"#))) ((Criterion.Measurement.Types.whnf test_6) 1000))) (((:) (((GHC.Base.$) (Criterion.Measurement.Types.bench (GHC.CString.unpackCString# "7"#))) ((Criterion.Measurement.Types.whnf test_7) 1000))) (((:) (((GHC.Base.$) (Criterion.Measurement.Types.bench (GHC.CString.unpackCString# "8"#))) ((Criterion.Measurement.Types.whnf test_8) 1000))) (((:) (((GHC.Base.$) (Criterion.Measurement.Types.bench (GHC.CString.unpackCString# "9"#))) ((Criterion.Measurement.Types.whnf test_9) 1000))) (((:) (((GHC.Base.$) (Criterion.Measurement.Types.bench (GHC.CString.unpackCString# "10"#))) ((Criterion.Measurement.Types.whnf test_10) 1000))) (((:) (((GHC.Base.$) (Criterion.Measurement.Types.bench (GHC.CString.unpackCString# "11"#))) ((Criterion.Measurement.Types.whnf test_11) 1000))) (((:) (((GHC.Base.$) (Criterion.Measurement.Types.bench (GHC.CString.unpackCString# "12"#))) ((Criterion.Measurement.Types.whnf test_12) 1000))) []))))))))))))))

test_1 = (\n -> (Data.Foldable.sum (GHC.Base.build (\c -> (\n' -> let sh = (GHC.Num.fromInteger 0) in (((GHC.Base.foldr (((GHC.Base..) c) (\i -> (_0 (((GHC.Num.+) i) sh))))) n') ((GHC.Enum.enumFromTo sh) n)))))))

test_2 = (\n'2 -> (Data.Foldable.sum (GHC.Base.build (\c' -> (\n'3 -> let sh'2 = (GHC.Num.fromInteger 0) in (((GHC.Base.foldr (((GHC.Base..) c') (\i' -> let sh' = ((GHC.Num.+) i') in (_1 (sh' sh'2) (sh' (GHC.Num.fromInteger 1)))))) n'3) ((GHC.Enum.enumFromTo sh'2) n'2)))))))

test_3 = (\n'4 -> (Data.Foldable.sum (GHC.Base.build (\c'2 -> (\n'5 -> let sh'4 = (GHC.Num.fromInteger 0) in (((GHC.Base.foldr (((GHC.Base..) c'2) (\i'2 -> let sh'3 = ((GHC.Num.+) i'2) in (_2 (sh'3 sh'4) (sh'3 (GHC.Num.fromInteger 1)) (sh'3 (GHC.Num.fromInteger 2)))))) n'5) ((GHC.Enum.enumFromTo sh'4) n'4)))))))

test_4 = (\n'6 -> (Data.Foldable.sum (GHC.Base.build (\c'3 -> (\n'7 -> let sh'6 = (GHC.Num.fromInteger 0) in (((GHC.Base.foldr (((GHC.Base..) c'3) (\i'3 -> let sh'5 = ((GHC.Num.+) i'3) in (_3 (sh'5 sh'6) (sh'5 (GHC.Num.fromInteger 1)) (sh'5 (GHC.Num.fromInteger 2)) (sh'5 (GHC.Num.fromInteger 3)))))) n'7) ((GHC.Enum.enumFromTo sh'6) n'6)))))))

test_5 = (\n'8 -> (Data.Foldable.sum (GHC.Base.build (\c'4 -> (\n'9 -> let sh'8 = (GHC.Num.fromInteger 0) in (((GHC.Base.foldr (((GHC.Base..) c'4) (\i'4 -> let sh'7 = ((GHC.Num.+) i'4) in (_4 (sh'7 sh'8) (sh'7 (GHC.Num.fromInteger 1)) (sh'7 (GHC.Num.fromInteger 2)) (sh'7 (GHC.Num.fromInteger 3)) (sh'7 (GHC.Num.fromInteger 4)))))) n'9) ((GHC.Enum.enumFromTo sh'8) n'8)))))))

test_6 = (\n'10 -> (Data.Foldable.sum (GHC.Base.build (\c'5 -> (\n'11 -> let sh'10 = (GHC.Num.fromInteger 0) in (((GHC.Base.foldr (((GHC.Base..) c'5) (\i'5 -> let sh'9 = ((GHC.Num.+) i'5) in (_5 (sh'9 sh'10) (sh'9 (GHC.Num.fromInteger 1)) (sh'9 (GHC.Num.fromInteger 2)) (sh'9 (GHC.Num.fromInteger 3)) (sh'9 (GHC.Num.fromInteger 4)) (sh'9 (GHC.Num.fromInteger 5)))))) n'11) ((GHC.Enum.enumFromTo sh'10) n'10)))))))

test_7 = (\n'12 -> (Data.Foldable.sum (GHC.Base.build (\c'6 -> (\n'13 -> let sh'12 = (GHC.Num.fromInteger 0) in (((GHC.Base.foldr (((GHC.Base..) c'6) (\i'6 -> let sh'11 = ((GHC.Num.+) i'6) in (_6 (sh'11 sh'12) (sh'11 (GHC.Num.fromInteger 1)) (sh'11 (GHC.Num.fromInteger 2)) (sh'11 (GHC.Num.fromInteger 3)) (sh'11 (GHC.Num.fromInteger 4)) (sh'11 (GHC.Num.fromInteger 5)) (sh'11 (GHC.Num.fromInteger 6)))))) n'13) ((GHC.Enum.enumFromTo sh'12) n'12)))))))

test_8 = (\n'14 -> (Data.Foldable.sum (GHC.Base.build (\c'7 -> (\n'15 -> let sh'14 = (GHC.Num.fromInteger 0) in (((GHC.Base.foldr (((GHC.Base..) c'7) (\i'7 -> let sh'13 = ((GHC.Num.+) i'7) in (_7 (sh'13 sh'14) (sh'13 (GHC.Num.fromInteger 1)) (sh'13 (GHC.Num.fromInteger 2)) (sh'13 (GHC.Num.fromInteger 3)) (sh'13 (GHC.Num.fromInteger 4)) (sh'13 (GHC.Num.fromInteger 5)) (sh'13 (GHC.Num.fromInteger 6)) (sh'13 (GHC.Num.fromInteger 7)))))) n'15) ((GHC.Enum.enumFromTo sh'14) n'14)))))))

test_9 = (\n'16 -> (Data.Foldable.sum (GHC.Base.build (\c'8 -> (\n'17 -> let sh'16 = (GHC.Num.fromInteger 0) in (((GHC.Base.foldr (((GHC.Base..) c'8) (\i'8 -> let sh'15 = ((GHC.Num.+) i'8) in (_8 (sh'15 sh'16) (sh'15 (GHC.Num.fromInteger 1)) (sh'15 (GHC.Num.fromInteger 2)) (sh'15 (GHC.Num.fromInteger 3)) (sh'15 (GHC.Num.fromInteger 4)) (sh'15 (GHC.Num.fromInteger 5)) (sh'15 (GHC.Num.fromInteger 6)) (sh'15 (GHC.Num.fromInteger 7)) (sh'15 (GHC.Num.fromInteger 8)))))) n'17) ((GHC.Enum.enumFromTo sh'16) n'16)))))))

test_10 = (\n'18 -> (Data.Foldable.sum (GHC.Base.build (\c'9 -> (\n'19 -> let sh'18 = (GHC.Num.fromInteger 0) in (((GHC.Base.foldr (((GHC.Base..) c'9) (\i'9 -> let sh'17 = ((GHC.Num.+) i'9) in (_9 (sh'17 sh'18) (sh'17 (GHC.Num.fromInteger 1)) (sh'17 (GHC.Num.fromInteger 2)) (sh'17 (GHC.Num.fromInteger 3)) (sh'17 (GHC.Num.fromInteger 4)) (sh'17 (GHC.Num.fromInteger 5)) (sh'17 (GHC.Num.fromInteger 6)) (sh'17 (GHC.Num.fromInteger 7)) (sh'17 (GHC.Num.fromInteger 8)) (sh'17 (GHC.Num.fromInteger 9)))))) n'19) ((GHC.Enum.enumFromTo sh'18) n'18)))))))

test_11 = (\n'20 -> (Data.Foldable.sum (GHC.Base.build (\c'10 -> (\n'21 -> let sh'20 = (GHC.Num.fromInteger 0) in (((GHC.Base.foldr (((GHC.Base..) c'10) (\i'10 -> let sh'19 = ((GHC.Num.+) i'10) in (_10 (sh'19 sh'20) (sh'19 (GHC.Num.fromInteger 1)) (sh'19 (GHC.Num.fromInteger 2)) (sh'19 (GHC.Num.fromInteger 3)) (sh'19 (GHC.Num.fromInteger 4)) (sh'19 (GHC.Num.fromInteger 5)) (sh'19 (GHC.Num.fromInteger 6)) (sh'19 (GHC.Num.fromInteger 7)) (sh'19 (GHC.Num.fromInteger 8)) (sh'19 (GHC.Num.fromInteger 9)) (sh'19 (GHC.Num.fromInteger 10)))))) n'21) ((GHC.Enum.enumFromTo sh'20) n'20)))))))

test_12 = (\n'22 -> (Data.Foldable.sum (GHC.Base.build (\c'11 -> (\n'23 -> let sh'22 = (GHC.Num.fromInteger 0) in (((GHC.Base.foldr (((GHC.Base..) c'11) (\i'11 -> let sh'21 = ((GHC.Num.+) i'11) in (_11 (sh'21 sh'22) (sh'21 (GHC.Num.fromInteger 1)) (sh'21 (GHC.Num.fromInteger 2)) (sh'21 (GHC.Num.fromInteger 3)) (sh'21 (GHC.Num.fromInteger 4)) (sh'21 (GHC.Num.fromInteger 5)) (sh'21 (GHC.Num.fromInteger 6)) (sh'21 (GHC.Num.fromInteger 7)) (sh'21 (GHC.Num.fromInteger 8)) (sh'21 (GHC.Num.fromInteger 9)) (sh'21 (GHC.Num.fromInteger 10)) (sh'21 (GHC.Num.fromInteger 11)))))) n'23) ((GHC.Enum.enumFromTo sh'22) n'22)))))))

prod_1 = (\eta -> (case eta of {[] -> (GHC.Num.fromInteger 0); (:) arg0 arg1 -> (case arg1 of {[] -> (_0 arg0); (_) -> (Control.Exception.Base.patError "/Volumes/Macintosh HD/Users/lptk/work/EPFL/DATA/git/alt/Squid-1.0/haskellopt/src/test/haskell/VectorsBench.hs:(9,1)-(10,13)|function prod_1"#)})}))

_0 eta' = (((GHC.Num.+) (GHC.Num.fromInteger 0)) eta')

prod_10 = (\eta'2 -> let { sh'24 = ((GHC.Num.+) sh'23); sh'23 = (GHC.Num.fromInteger 0) } in (case eta'2 of {[] -> sh'23; (:) arg0' arg1' -> (case arg1' of {[] -> (sh'24 arg0'); (:) arg0'2 arg1'2 -> (case arg1'2 of {[] -> (((GHC.Num.+) (sh'24 arg0')) arg0'2); (:) arg0'3 arg1'3 -> (case arg1'3 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (sh'24 arg0')) arg0'2)) arg0'3); (:) arg0'4 arg1'4 -> (case arg1'4 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'24 arg0')) arg0'2)) arg0'3)) arg0'4); (:) arg0'5 arg1'5 -> (case arg1'5 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'24 arg0')) arg0'2)) arg0'3)) arg0'4)) arg0'5); (:) arg0'6 arg1'6 -> (case arg1'6 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'24 arg0')) arg0'2)) arg0'3)) arg0'4)) arg0'5)) arg0'6); (:) arg0'7 arg1'7 -> (case arg1'7 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'24 arg0')) arg0'2)) arg0'3)) arg0'4)) arg0'5)) arg0'6)) arg0'7); (:) arg0'8 arg1'8 -> (case arg1'8 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'24 arg0')) arg0'2)) arg0'3)) arg0'4)) arg0'5)) arg0'6)) arg0'7)) arg0'8); (:) arg0'9 arg1'9 -> (case arg1'9 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'24 arg0')) arg0'2)) arg0'3)) arg0'4)) arg0'5)) arg0'6)) arg0'7)) arg0'8)) arg0'9); (:) arg0'10 arg1'10 -> (case arg1'10 of {[] -> (_9 arg0' arg0'2 arg0'3 arg0'4 arg0'5 arg0'6 arg0'7 arg0'8 arg0'9 arg0'10); (_) -> (Control.Exception.Base.patError "/Volumes/Macintosh HD/Users/lptk/work/EPFL/DATA/git/alt/Squid-1.0/haskellopt/src/test/haskell/VectorsBench.hs:(99,1)-(109,14)|function prod_10"#)})})})})})})})})})})}))

_9 eta'3 eta'4 eta'5 eta'6 eta'7 eta'8 eta'9 eta'10 eta'11 eta'12 = (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (GHC.Num.fromInteger 0)) eta'3)) eta'4)) eta'5)) eta'6)) eta'7)) eta'8)) eta'9)) eta'10)) eta'11)) eta'12)

prod_11 = (\eta'13 -> let { sh'26 = ((GHC.Num.+) sh'25); sh'25 = (GHC.Num.fromInteger 0) } in (case eta'13 of {[] -> sh'25; (:) arg0'11 arg1'11 -> (case arg1'11 of {[] -> (sh'26 arg0'11); (:) arg0'12 arg1'12 -> (case arg1'12 of {[] -> (((GHC.Num.+) (sh'26 arg0'11)) arg0'12); (:) arg0'13 arg1'13 -> (case arg1'13 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (sh'26 arg0'11)) arg0'12)) arg0'13); (:) arg0'14 arg1'14 -> (case arg1'14 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'26 arg0'11)) arg0'12)) arg0'13)) arg0'14); (:) arg0'15 arg1'15 -> (case arg1'15 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'26 arg0'11)) arg0'12)) arg0'13)) arg0'14)) arg0'15); (:) arg0'16 arg1'16 -> (case arg1'16 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'26 arg0'11)) arg0'12)) arg0'13)) arg0'14)) arg0'15)) arg0'16); (:) arg0'17 arg1'17 -> (case arg1'17 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'26 arg0'11)) arg0'12)) arg0'13)) arg0'14)) arg0'15)) arg0'16)) arg0'17); (:) arg0'18 arg1'18 -> (case arg1'18 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'26 arg0'11)) arg0'12)) arg0'13)) arg0'14)) arg0'15)) arg0'16)) arg0'17)) arg0'18); (:) arg0'19 arg1'19 -> (case arg1'19 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'26 arg0'11)) arg0'12)) arg0'13)) arg0'14)) arg0'15)) arg0'16)) arg0'17)) arg0'18)) arg0'19); (:) arg0'20 arg1'20 -> (case arg1'20 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'26 arg0'11)) arg0'12)) arg0'13)) arg0'14)) arg0'15)) arg0'16)) arg0'17)) arg0'18)) arg0'19)) arg0'20); (:) arg0'21 arg1'21 -> (case arg1'21 of {[] -> (_10 arg0'11 arg0'12 arg0'13 arg0'14 arg0'15 arg0'16 arg0'17 arg0'18 arg0'19 arg0'20 arg0'21); (_) -> (Control.Exception.Base.patError "/Volumes/Macintosh HD/Users/lptk/work/EPFL/DATA/git/alt/Squid-1.0/haskellopt/src/test/haskell/VectorsBench.hs:(114,1)-(125,14)|function prod_11"#)})})})})})})})})})})})}))

_10 eta'14 eta'15 eta'16 eta'17 eta'18 eta'19 eta'20 eta'21 eta'22 eta'23 eta'24 = (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (GHC.Num.fromInteger 0)) eta'14)) eta'15)) eta'16)) eta'17)) eta'18)) eta'19)) eta'20)) eta'21)) eta'22)) eta'23)) eta'24)

prod_12 = (\eta'25 -> let { sh'28 = ((GHC.Num.+) sh'27); sh'27 = (GHC.Num.fromInteger 0) } in (case eta'25 of {[] -> sh'27; (:) arg0'22 arg1'22 -> (case arg1'22 of {[] -> (sh'28 arg0'22); (:) arg0'23 arg1'23 -> (case arg1'23 of {[] -> (((GHC.Num.+) (sh'28 arg0'22)) arg0'23); (:) arg0'24 arg1'24 -> (case arg1'24 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (sh'28 arg0'22)) arg0'23)) arg0'24); (:) arg0'25 arg1'25 -> (case arg1'25 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'28 arg0'22)) arg0'23)) arg0'24)) arg0'25); (:) arg0'26 arg1'26 -> (case arg1'26 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'28 arg0'22)) arg0'23)) arg0'24)) arg0'25)) arg0'26); (:) arg0'27 arg1'27 -> (case arg1'27 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'28 arg0'22)) arg0'23)) arg0'24)) arg0'25)) arg0'26)) arg0'27); (:) arg0'28 arg1'28 -> (case arg1'28 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'28 arg0'22)) arg0'23)) arg0'24)) arg0'25)) arg0'26)) arg0'27)) arg0'28); (:) arg0'29 arg1'29 -> (case arg1'29 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'28 arg0'22)) arg0'23)) arg0'24)) arg0'25)) arg0'26)) arg0'27)) arg0'28)) arg0'29); (:) arg0'30 arg1'30 -> (case arg1'30 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'28 arg0'22)) arg0'23)) arg0'24)) arg0'25)) arg0'26)) arg0'27)) arg0'28)) arg0'29)) arg0'30); (:) arg0'31 arg1'31 -> (case arg1'31 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'28 arg0'22)) arg0'23)) arg0'24)) arg0'25)) arg0'26)) arg0'27)) arg0'28)) arg0'29)) arg0'30)) arg0'31); (:) arg0'32 arg1'32 -> (case arg1'32 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'28 arg0'22)) arg0'23)) arg0'24)) arg0'25)) arg0'26)) arg0'27)) arg0'28)) arg0'29)) arg0'30)) arg0'31)) arg0'32); (:) arg0'33 arg1'33 -> (case arg1'33 of {[] -> (_11 arg0'22 arg0'23 arg0'24 arg0'25 arg0'26 arg0'27 arg0'28 arg0'29 arg0'30 arg0'31 arg0'32 arg0'33); (_) -> (Control.Exception.Base.patError "/Volumes/Macintosh HD/Users/lptk/work/EPFL/DATA/git/alt/Squid-1.0/haskellopt/src/test/haskell/VectorsBench.hs:(130,1)-(142,14)|function prod_12"#)})})})})})})})})})})})})}))

_11 eta'26 eta'27 eta'28 eta'29 eta'30 eta'31 eta'32 eta'33 eta'34 eta'35 eta'36 eta'37 = (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (GHC.Num.fromInteger 0)) eta'26)) eta'27)) eta'28)) eta'29)) eta'30)) eta'31)) eta'32)) eta'33)) eta'34)) eta'35)) eta'36)) eta'37)

prod_2 = (\eta'38 -> let sh'29 = (GHC.Num.fromInteger 0) in (case eta'38 of {[] -> sh'29; (:) arg0'34 arg1'34 -> (case arg1'34 of {[] -> (((GHC.Num.+) sh'29) arg0'34); (:) arg0'35 arg1'35 -> (case arg1'35 of {[] -> (_1 arg0'34 arg0'35); (_) -> (Control.Exception.Base.patError "/Volumes/Macintosh HD/Users/lptk/work/EPFL/DATA/git/alt/Squid-1.0/haskellopt/src/test/haskell/VectorsBench.hs:(15,1)-(17,13)|function prod_2"#)})})}))

_1 eta'39 eta'40 = (((GHC.Num.+) (((GHC.Num.+) (GHC.Num.fromInteger 0)) eta'39)) eta'40)

prod_3 = (\eta'41 -> let { sh'31 = ((GHC.Num.+) sh'30); sh'30 = (GHC.Num.fromInteger 0) } in (case eta'41 of {[] -> sh'30; (:) arg0'36 arg1'36 -> (case arg1'36 of {[] -> (sh'31 arg0'36); (:) arg0'37 arg1'37 -> (case arg1'37 of {[] -> (((GHC.Num.+) (sh'31 arg0'36)) arg0'37); (:) arg0'38 arg1'38 -> (case arg1'38 of {[] -> (_2 arg0'36 arg0'37 arg0'38); (_) -> (Control.Exception.Base.patError "/Volumes/Macintosh HD/Users/lptk/work/EPFL/DATA/git/alt/Squid-1.0/haskellopt/src/test/haskell/VectorsBench.hs:(22,1)-(25,13)|function prod_3"#)})})})}))

_2 eta'42 eta'43 eta'44 = (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (GHC.Num.fromInteger 0)) eta'42)) eta'43)) eta'44)

prod_4 = (\eta'45 -> let { sh'33 = ((GHC.Num.+) sh'32); sh'32 = (GHC.Num.fromInteger 0) } in (case eta'45 of {[] -> sh'32; (:) arg0'39 arg1'39 -> (case arg1'39 of {[] -> (sh'33 arg0'39); (:) arg0'40 arg1'40 -> (case arg1'40 of {[] -> (((GHC.Num.+) (sh'33 arg0'39)) arg0'40); (:) arg0'41 arg1'41 -> (case arg1'41 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (sh'33 arg0'39)) arg0'40)) arg0'41); (:) arg0'42 arg1'42 -> (case arg1'42 of {[] -> (_3 arg0'39 arg0'40 arg0'41 arg0'42); (_) -> (Control.Exception.Base.patError "/Volumes/Macintosh HD/Users/lptk/work/EPFL/DATA/git/alt/Squid-1.0/haskellopt/src/test/haskell/VectorsBench.hs:(30,1)-(34,13)|function prod_4"#)})})})})}))

_3 eta'46 eta'47 eta'48 eta'49 = (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (GHC.Num.fromInteger 0)) eta'46)) eta'47)) eta'48)) eta'49)

prod_5 = (\eta'50 -> let { sh'35 = ((GHC.Num.+) sh'34); sh'34 = (GHC.Num.fromInteger 0) } in (case eta'50 of {[] -> sh'34; (:) arg0'43 arg1'43 -> (case arg1'43 of {[] -> (sh'35 arg0'43); (:) arg0'44 arg1'44 -> (case arg1'44 of {[] -> (((GHC.Num.+) (sh'35 arg0'43)) arg0'44); (:) arg0'45 arg1'45 -> (case arg1'45 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (sh'35 arg0'43)) arg0'44)) arg0'45); (:) arg0'46 arg1'46 -> (case arg1'46 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'35 arg0'43)) arg0'44)) arg0'45)) arg0'46); (:) arg0'47 arg1'47 -> (case arg1'47 of {[] -> (_4 arg0'43 arg0'44 arg0'45 arg0'46 arg0'47); (_) -> (Control.Exception.Base.patError "/Volumes/Macintosh HD/Users/lptk/work/EPFL/DATA/git/alt/Squid-1.0/haskellopt/src/test/haskell/VectorsBench.hs:(39,1)-(44,13)|function prod_5"#)})})})})})}))

_4 eta'51 eta'52 eta'53 eta'54 eta'55 = (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (GHC.Num.fromInteger 0)) eta'51)) eta'52)) eta'53)) eta'54)) eta'55)

prod_6 = (\eta'56 -> let { sh'37 = ((GHC.Num.+) sh'36); sh'36 = (GHC.Num.fromInteger 0) } in (case eta'56 of {[] -> sh'36; (:) arg0'48 arg1'48 -> (case arg1'48 of {[] -> (sh'37 arg0'48); (:) arg0'49 arg1'49 -> (case arg1'49 of {[] -> (((GHC.Num.+) (sh'37 arg0'48)) arg0'49); (:) arg0'50 arg1'50 -> (case arg1'50 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (sh'37 arg0'48)) arg0'49)) arg0'50); (:) arg0'51 arg1'51 -> (case arg1'51 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'37 arg0'48)) arg0'49)) arg0'50)) arg0'51); (:) arg0'52 arg1'52 -> (case arg1'52 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'37 arg0'48)) arg0'49)) arg0'50)) arg0'51)) arg0'52); (:) arg0'53 arg1'53 -> (case arg1'53 of {[] -> (_5 arg0'48 arg0'49 arg0'50 arg0'51 arg0'52 arg0'53); (_) -> (Control.Exception.Base.patError "/Volumes/Macintosh HD/Users/lptk/work/EPFL/DATA/git/alt/Squid-1.0/haskellopt/src/test/haskell/VectorsBench.hs:(49,1)-(55,13)|function prod_6"#)})})})})})})}))

_5 eta'57 eta'58 eta'59 eta'60 eta'61 eta'62 = (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (GHC.Num.fromInteger 0)) eta'57)) eta'58)) eta'59)) eta'60)) eta'61)) eta'62)

prod_7 = (\eta'63 -> let { sh'39 = ((GHC.Num.+) sh'38); sh'38 = (GHC.Num.fromInteger 0) } in (case eta'63 of {[] -> sh'38; (:) arg0'54 arg1'54 -> (case arg1'54 of {[] -> (sh'39 arg0'54); (:) arg0'55 arg1'55 -> (case arg1'55 of {[] -> (((GHC.Num.+) (sh'39 arg0'54)) arg0'55); (:) arg0'56 arg1'56 -> (case arg1'56 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (sh'39 arg0'54)) arg0'55)) arg0'56); (:) arg0'57 arg1'57 -> (case arg1'57 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'39 arg0'54)) arg0'55)) arg0'56)) arg0'57); (:) arg0'58 arg1'58 -> (case arg1'58 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'39 arg0'54)) arg0'55)) arg0'56)) arg0'57)) arg0'58); (:) arg0'59 arg1'59 -> (case arg1'59 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'39 arg0'54)) arg0'55)) arg0'56)) arg0'57)) arg0'58)) arg0'59); (:) arg0'60 arg1'60 -> (case arg1'60 of {[] -> (_6 arg0'54 arg0'55 arg0'56 arg0'57 arg0'58 arg0'59 arg0'60); (_) -> (Control.Exception.Base.patError "/Volumes/Macintosh HD/Users/lptk/work/EPFL/DATA/git/alt/Squid-1.0/haskellopt/src/test/haskell/VectorsBench.hs:(60,1)-(67,13)|function prod_7"#)})})})})})})})}))

_6 eta'64 eta'65 eta'66 eta'67 eta'68 eta'69 eta'70 = (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (GHC.Num.fromInteger 0)) eta'64)) eta'65)) eta'66)) eta'67)) eta'68)) eta'69)) eta'70)

prod_8 = (\eta'71 -> let { sh'41 = ((GHC.Num.+) sh'40); sh'40 = (GHC.Num.fromInteger 0) } in (case eta'71 of {[] -> sh'40; (:) arg0'61 arg1'61 -> (case arg1'61 of {[] -> (sh'41 arg0'61); (:) arg0'62 arg1'62 -> (case arg1'62 of {[] -> (((GHC.Num.+) (sh'41 arg0'61)) arg0'62); (:) arg0'63 arg1'63 -> (case arg1'63 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (sh'41 arg0'61)) arg0'62)) arg0'63); (:) arg0'64 arg1'64 -> (case arg1'64 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'41 arg0'61)) arg0'62)) arg0'63)) arg0'64); (:) arg0'65 arg1'65 -> (case arg1'65 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'41 arg0'61)) arg0'62)) arg0'63)) arg0'64)) arg0'65); (:) arg0'66 arg1'66 -> (case arg1'66 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'41 arg0'61)) arg0'62)) arg0'63)) arg0'64)) arg0'65)) arg0'66); (:) arg0'67 arg1'67 -> (case arg1'67 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'41 arg0'61)) arg0'62)) arg0'63)) arg0'64)) arg0'65)) arg0'66)) arg0'67); (:) arg0'68 arg1'68 -> (case arg1'68 of {[] -> (_7 arg0'61 arg0'62 arg0'63 arg0'64 arg0'65 arg0'66 arg0'67 arg0'68); (_) -> (Control.Exception.Base.patError "/Volumes/Macintosh HD/Users/lptk/work/EPFL/DATA/git/alt/Squid-1.0/haskellopt/src/test/haskell/VectorsBench.hs:(72,1)-(80,13)|function prod_8"#)})})})})})})})})}))

_7 eta'72 eta'73 eta'74 eta'75 eta'76 eta'77 eta'78 eta'79 = (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (GHC.Num.fromInteger 0)) eta'72)) eta'73)) eta'74)) eta'75)) eta'76)) eta'77)) eta'78)) eta'79)

prod_9 = (\eta'80 -> let { sh'43 = ((GHC.Num.+) sh'42); sh'42 = (GHC.Num.fromInteger 0) } in (case eta'80 of {[] -> sh'42; (:) arg0'69 arg1'69 -> (case arg1'69 of {[] -> (sh'43 arg0'69); (:) arg0'70 arg1'70 -> (case arg1'70 of {[] -> (((GHC.Num.+) (sh'43 arg0'69)) arg0'70); (:) arg0'71 arg1'71 -> (case arg1'71 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (sh'43 arg0'69)) arg0'70)) arg0'71); (:) arg0'72 arg1'72 -> (case arg1'72 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'43 arg0'69)) arg0'70)) arg0'71)) arg0'72); (:) arg0'73 arg1'73 -> (case arg1'73 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'43 arg0'69)) arg0'70)) arg0'71)) arg0'72)) arg0'73); (:) arg0'74 arg1'74 -> (case arg1'74 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'43 arg0'69)) arg0'70)) arg0'71)) arg0'72)) arg0'73)) arg0'74); (:) arg0'75 arg1'75 -> (case arg1'75 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'43 arg0'69)) arg0'70)) arg0'71)) arg0'72)) arg0'73)) arg0'74)) arg0'75); (:) arg0'76 arg1'76 -> (case arg1'76 of {[] -> (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (sh'43 arg0'69)) arg0'70)) arg0'71)) arg0'72)) arg0'73)) arg0'74)) arg0'75)) arg0'76); (:) arg0'77 arg1'77 -> (case arg1'77 of {[] -> (_8 arg0'69 arg0'70 arg0'71 arg0'72 arg0'73 arg0'74 arg0'75 arg0'76 arg0'77); (_) -> (Control.Exception.Base.patError "/Volumes/Macintosh HD/Users/lptk/work/EPFL/DATA/git/alt/Squid-1.0/haskellopt/src/test/haskell/VectorsBench.hs:(85,1)-(94,13)|function prod_9"#)})})})})})})})})})}))

_8 eta'81 eta'82 eta'83 eta'84 eta'85 eta'86 eta'87 eta'88 eta'89 = (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (((GHC.Num.+) (GHC.Num.fromInteger 0)) eta'81)) eta'82)) eta'83)) eta'84)) eta'85)) eta'86)) eta'87)) eta'88)) eta'89)
